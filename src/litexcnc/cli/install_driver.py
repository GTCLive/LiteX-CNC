"""
This file contains the command to compile the driver

"""
import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile
import click

import sys
if sys.version_info[:2] >= (3, 8):
    # TODO: Import directly (no need for conditional) when `python_requires = >= 3.8`
    from importlib.metadata import entry_points  # pragma: no cover
else:
    from importlib_metadata import entry_points  # pragma: no cover


def find_modinc():
    """Finds the location where `halcompile`
    """
    halcompile = shutil.which('halcompile')
    if not halcompile:
        raise SystemExit("Unable to locate halcompile, is it installed?")
    d = os.path.abspath(os.path.dirname(os.path.dirname(halcompile)))
    for e in ['src', 'etc/linuxcnc', '/etc/linuxcnc', 'share/linuxcnc']:
        e = os.path.join(d, e, 'Makefile.modinc')
        if os.path.exists(e):
            return e
    raise SystemExit("Unable to locate Makefile.modinc")


@click.command()
@click.option('--modules', '-m', multiple=True)
@click.option('--rtlib', '-m', type=str, help="Override the path where all modules are installed (normally auto-detected).")
def cli(modules, rtlib):
    """Installs the LitexCNC driver using halcompile."""

    with tempfile.TemporaryDirectory() as temp_dir:
        driver_files_group = "litexcnc.driver_files"
        entries = entry_points()
        driver_files = {}
        if hasattr(entries, "select"):
            # The select method was introduced in importlib_metadata 3.9 (and Python 3.10)
            # and the previous dict interface was declared deprecated
            driver_folders = entries.select(group=driver_files_group)  # type: ignore
        else:
            # TODO: Once Python 3.10 becomes the oldest version supported, this fallback and
            #       conditional statement can be removed.
            driver_folders = (extension for extension in entries.get(driver_files_group, []))  # type: ignore
        for driver_folder in driver_folders:
            # Add the files to the list
            driver_files[driver_folder.name] = driver_folder.load().FILES

        # List with files for the compile-script
        files_to_compiles = []

        # Create the file config.h
        if not rtlib:
            rtlib = os.path.join(os.path.dirname(os.path.dirname(find_modinc())), 'rtlib')
        f = open(os.path.join(temp_dir, 'config.h'),'w')
        print("/**", file=f)
        print(" * THIS FILE IS AUTOGENERATED BY HALCOMPILE.PY, CHANGES WILL BE OVERWRITTEN", file=f)
        print(" */", file=f)
        print("#ifndef __INCLUDE_LITEXCNC_CONFIG_H__", file=f)
        print("#define __INCLUDE_LITEXCNC_CONFIG_H__", file=f)
        print("", file=f)
        print(f"#define EMC2_RTLIB_DIR \"{rtlib}\"", file=f)
        print("", file=f)
        print("#endif /* __INCLUDE_LITEXCNC_CONFIG_H__ */", file=f)
        f.close()
        
        # Copy the files to the temp directory
        click.echo(click.style("INFO", fg="blue") + ": Retrieving default driver files to compile...")
        if  not modules or 'default' in modules:
            files_to_compiles.append('litexcnc.c')
            files_to_compiles.append('pos2vel.c')
        for file in driver_files.pop('default'):
            click.echo(f"Copying file '{file.name}'")
            shutil.copy2(
                os.path.join(file),
                os.path.join(temp_dir, os.path.basename(file.name))
            )
            if not modules or 'default' in modules:
                if re.search("litexcnc_.*\.c", file.name):
                    files_to_compiles.append(file.name)
        if driver_files.keys():
            click.echo(click.style("INFO", fg="blue") + ": Retrieving extra modules / boards to compile...")
            for extra in driver_files.keys():
                for file in driver_files[extra]:
                    click.echo(f"Copying file '{file.name}'")
                    shutil.copy2(
                        os.path.join(file),
                        os.path.join(temp_dir, os.path.basename(file.name))
                    )
                    if not modules or extra in modules:
                        if re.search("litexcnc_.*\.c", file.name):
                            files_to_compiles.append(file.name)

        # Compile the driver
        click.echo(click.style("INFO", fg="blue") + ": Compiling LitexCNC driver...")
        ret = subprocess.call(
            f'halcompile --install {" ".join(files_to_compiles)}',
            cwd=temp_dir,
            shell=True
        )
        if ret:
            click.echo(click.style("Error", fg="red") + ": Compilation of the driver failed.")
            return
    # Done!
    click.echo(click.style("INFO", fg="blue") + ": LitexCNC driver installed")
